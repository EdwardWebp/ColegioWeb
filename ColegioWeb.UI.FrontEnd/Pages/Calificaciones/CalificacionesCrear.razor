@page "/Calificaciones/create"
@using ColegioWeb.Core.DTO.Asignatura
@using ColegioWeb.Core.DTO.Calificaciones
@using ColegioWeb.Core.DTO.Estudiantes
@using ColegioWeb.UI.FrontEnd.Services
@inject CalificacionesServices calificacionesservices
@inject EstudiantesServices estudiantesservices
@inject AsignaturaServices asignaturaservices
@inject NavigationManager Navigation
@inject SweetAlertService Swal

<div class="container">
    <h3><i class="fas fa-box"></i> Crear Calificaciones</h3>
    <hr />

    <EditForm Model="Calificaciones" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="estudiante"><i class="fas fa-list-alt"></i> Nombre del Estudiante </label>
            <InputSelect id="estudiante" class="form-control" @bind-Value="Calificaciones.IDEstudiante">
                <option value="">------ SELECCIONE EL ESTUDIANTE ------</option>
                @foreach (var estudiante in estudiantes)

                {
                    <option value="@estudiante.ID">@($"{estudiante.Nombre} {estudiante.Apellido}")</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Calificaciones.NombreEstudiante)" />
        </div>

        <div class="form-group">
            <label for="asignatura"><i class="fas fa-list-alt"></i> Asignatura</label>
            <InputSelect id="asignatura" class="form-control" @bind-Value="Calificaciones.IDasignatura">
                <option value="">------ SELECCIONE LA ASIGNATURA ------</option>
                @foreach (var asignatura in asignaturas)

                {
                    <option value="@asignatura.ID">@asignatura.Nombre</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Calificaciones.NombreAsignatura)" />
        </div>

       

        <div class="form-group">
            <label for="numero"><i class="fas fa-cogs"></i> Nota Calificativa</label>
            <InputNumber id="numero" class="form-control" @bind-Value="Calificaciones.nocalificacion" />
            <ValidationMessage For="@(() => Calificaciones.nocalificacion)" />
        </div>


        <div class="button-container">
            <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Registrar Datos</button>
            <button class="btn btn-secondary" @onclick="Volver"><i class="fas fa-arrow-left"></i> Volver</button>
        </div>

    </EditForm>

    @if (!string.IsNullOrEmpty(Mensaje))

    {
        <div class="alert alert-success mt-3"><i class="fas fa-check-circle"></i> @Mensaje</div>
    }

</div>


<style>

    .container {
        max-width: 800px;
        margin-top: 30px;
    }

    h3 {
        font-size: 1.8rem;
        font-weight: bold;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    input[type="text"], input[type="number"], select {
        border-radius: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

        input[type="text"]:focus, input[type="number"]:focus, select:focus {
            border-color: #28a745;
            box-shadow: 0 0 5px rgba(40, 167, 69, 0.5);
        }

    .button-container button {
        border-radius: 50px;
        padding: 10px 20px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .button-container button:hover {
            transform: scale(1.05);
        }

    .alert {
        display: flex;
        align-items: center;
        font-size: 1rem;
    }

        .alert i {
            margin-right: 10px;
        }
</style>

@code {
    private CalificacionesDTO Calificaciones = new CalificacionesDTO();
    private CalificacionesDTO Calificacioness = new CalificacionesDTO();
    private List<EstudianteDTO> estudiantes = new List<EstudianteDTO>();
    private List<AsignaturaDTO> asignaturas = new List<AsignaturaDTO>();
    private bool unableValue = false;

    private string Mensaje;

    protected override async Task OnInitializedAsync()

    {

        estudiantes = (await estudiantesservices.GetAllEstudianteAsync()).ToList();
        asignaturas = (await asignaturaservices.GetAllAsignaturas()).ToList();

    }
    private async Task HandleValidSubmit()

    {

        await calificacionesservices.CreateCalificaciones(Calificaciones);

        Navigation.NavigateTo("/Calificaciones");
        await Swal.FireAsync("¡¡Creado!!", "¡Los Datos han sido creados de manera Satisfacotria!", SweetAlertIcon.Success);

    }



    private void Volver()

    {

        Navigation.NavigateTo("/Calificaciones");

    }
}
