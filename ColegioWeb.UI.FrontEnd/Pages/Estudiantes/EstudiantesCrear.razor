@page "/Estudiante/create"
@using ColegioWeb.Core.DTO.Estudiantes
@using ColegioWeb.UI.FrontEnd.Services
@inject EstudiantesServices estudianteservices
@inject NavigationManager Navigation
@inject SweetAlertService Swal

<div class="container">

    <h3><i class="fas fa-plus-circle"></i> <strong>Crear Categoría</strong></h3>
    <hr />

    <EditForm Model="estudiante" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Nombre"><i class="fas fa-tag"></i> Nombre</label>
            <InputText id="Nombre" class="form-control" @bind-Value="estudiante.Nombre" />
            <ValidationMessage For="@(() => estudiante.Nombre)" />
        </div>

        <div class="form-group">
            <label for="Apellido"><i class="fas fa-tag"></i> Apellido</label>
            <InputText id="Apellido" class="form-control" @bind-Value="estudiante.Apellido" />
            <ValidationMessage For="@(() => estudiante.Apellido)" />
        </div>

        <div class="form-group">
            <label for="Matricula"><i class="fas fa-tag"></i> Matricula</label>
            <InputText id="Matricula" class="form-control" @bind-Value="estudiante.Matricula" />
            <ValidationMessage For="@(() => estudiante.Matricula)" />
        </div>

        <div class="form-group">
            <label for="Dirección"><i class="fas fa-tag"></i> Dirección</label>
            <InputText id="Nombre" class="form-control" @bind-Value="estudiante.Direccion" />
            <ValidationMessage For="@(() => estudiante.Direccion)" />
        </div>

        <div class="form-group">
            <label for="Descripcion"><i class="fas fa-align-left"></i> Descripción</label>
            <InputText id="Descripcion" class="form-control" @bind-Value="estudiante.Descripción" />
            <ValidationMessage For="@(() => estudiante.Descripción)" />
        </div>

        <div class="button-container">
            <button type="submit" class="btn btn-success">
                <i class="fas fa-save"></i> Registrar Datos
            </button>
            <button class="btn btn-secondary" @onclick="Volver">
                <i class="fas fa-arrow-left"></i> Volver
            </button>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(Mensaje))

    {
        <div class="alert alert-success mt-3">
            <i class="fas fa-check-circle"></i> @Mensaje
        </div>
    }

</div>

<style>

    .container {
        max-width: 800px;
        margin-top: 30px;
    }

    h3 {
        font-size: 1.8rem;
        font-weight: bold;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    input[type="text"], input[type="number"], select {
        border-radius: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

        input[type="text"]:focus, input[type="number"]:focus, select:focus {
            border-color: #28a745;
            box-shadow: 0 0 5px rgba(40, 167, 69, 0.5);
        }

    .button-container button {
        border-radius: 50px;
        padding: 10px 20px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .button-container button:hover {
            transform: scale(1.05);
        }

    .alert {
        display: flex;
        align-items: center;
        font-size: 1rem;
    }

        .alert i {
            margin-right: 10px;
        }
</style>

@code {
    private EstudianteDTO estudiante = new EstudianteDTO();

    private string Mensaje;



    private async Task HandleValidSubmit()

    {

        await estudianteservices.CreateEstudiante(estudiante);
        Navigation.NavigateTo("/Estudiante");
        await Swal.FireAsync("¡¡Creado!!", "¡Los Datos han sido creados de manera Satisfacotria!", SweetAlertIcon.Success);

    }



    private void Volver()

    {

        Navigation.NavigateTo("/Estudiante");

    }
}
